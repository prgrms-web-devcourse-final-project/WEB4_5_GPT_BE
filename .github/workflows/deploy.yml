name: deploy

on:
  push:
    paths:
      - '.github/workflows/**'
      - 'backend/src/**'
      - 'backend/build.gradle'
      - 'backend/settings.gradle'
      - 'backend/Dockerfile'
    branches:
      - develop  # TODO: main 브랜치로 변경 필요

env:
  DOCKER_REGISTRY: ghcr.io
  OWNER: gptplz
  DOCKER_IMAGE_NAME: unihub_backend

jobs:
  build_and_push:
    name: 도커 이미지 빌드 및 푸시
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: application-secret.yml 생성
        env:
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET }}
        run: |
          echo "$APPLICATION_SECRET" > backend/src/main/resources/application-secret.yml

      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2

      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 빌드 및 푸시
        uses: docker/build-push-action@v3
        with:
          context: backend
          push: true
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to:   type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: AWS SSM 배포
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:          ${{ secrets.AWS_REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: EC2 인스턴스 ID 조회
        id: get_instance_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=unihub-ec2-1" \
                      "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        with:
          aws-region:            ${{ secrets.AWS_REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids:          ${{ env.INSTANCE_ID }}
          comment:               Deploy
          command: |
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:latest && \
            docker stop unihubApp 2>/dev/null || true && \
            docker rm unihubApp   2>/dev/null || true && \
            docker run -d --name unihubApp --network common -p 8080:8080 \
              ${{ env.DOCKER_REGISTRY }}/${{ env.OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:latest && \
            docker rmi $(docker images -f "dangling=true" -q) || true
